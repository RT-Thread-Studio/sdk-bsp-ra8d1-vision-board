import os
from building import *
import rtconfig

# get current directory
cwd     = GetCurrentDir()
imlib_src = Glob('src/omv/imlib/*.c')
alloc_src = Glob('src/omv/alloc/*.c')
common_src = Glob('src/omv/common/*.c')
modules_src = Glob('src/omv/modules/*.c')

dsp_src = Glob('src/hal/cmsis/src/dsp/CommonTables/*.c')
dsp_src += Glob('src/hal/cmsis/src/dsp/FastMathFunctions/*.c')
dsp_src += Glob('src/hal/cmsis/src/dsp/TransformFunctions/arm_rfft_init_q15.c')
dsp_src += Glob('src/hal/cmsis/src/dsp/TransformFunctions/arm_rfft_init_q31.c')

ulab_src = Glob('src/omv/modules/ulab/code/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/carray/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/fft/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/linalg/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/numpy/ndarray/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/user/*.c')
ulab_src += Glob('src/omv/modules/ulab/code/utils/*.c')

ulab_scipy_src = Glob('src/omv/modules/ulab/code/scipy/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/linalg/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/optimize/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/signal/*.c')
ulab_scipy_src += Glob('src/omv/modules/ulab/code/scipy/special/*.c')

port_src = Glob('src/omv/ports/ra8/*.c')
sensor_src = Glob('src/omv/sensors/*.c')

SrcRemove(common_src, ['src/omv/common/ini.c'])
SrcRemove(common_src, ['src/omv/common/ff_wrapper.c'])
SrcRemove(modules_src, ['src/omv/modules/examplemodule.c'])
SrcRemove(modules_src, ['src/omv/modules/py_display_data.c'])
SrcRemove(modules_src, ['src/omv/modules/py_fir.c'])
SrcRemove(modules_src, ['src/omv/modules/py_fir_lepton.c'])
SrcRemove(modules_src, ['src/omv/modules/py_ft5x06.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tfp410.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tof.c'])
SrcRemove(modules_src, ['src/omv/modules/py_tv.c'])

if not GetDepend(['OMV_ENABLE_TF']):
    SrcRemove(modules_src, ['src/omv/modules/py_tf.c'])

path = [cwd + '/']
path += [cwd + '/src/hal']
path += [cwd + '/src/hal/cmsis/include']
path += [cwd + '/src/lib/libtf']
path += [cwd + '/src/omv']
path += [cwd + '/src/omv/alloc']
path += [cwd + '/src/omv/common']
path += [cwd + '/src/omv/imlib']
path += [cwd + '/src/omv/ports/ra8']
path += [cwd + '/src/omv/sensors']
path += [cwd + '/src/omv/boards/RA8']
path += [cwd + '/src/omv/modules']
path += [cwd + '/src/omv/modules/ulab/code']
path += [cwd + '/src/omv/modules/ulab/code/numpy']
path += [cwd + '/src/omv/modules/ulab/code/numpy/carray']
path += [cwd + '/src/omv/modules/ulab/code/numpy/fft']
path += [cwd + '/src/omv/modules/ulab/code/numpy/linalg']
path += [cwd + '/src/omv/modules/ulab/code/numpy/ndarray']
path += [cwd + '/src/omv/modules/ulab/code/scipy/linalg']
path += [cwd + '/src/omv/modules/ulab/code/scipy/optimize']
path += [cwd + '/src/omv/modules/ulab/code/scipy/signal']
path += [cwd + '/src/omv/modules/ulab/code/scipy/special']
path += [cwd + '/src/omv/modules/ulab/code/user']
path += [cwd + '/src/omv/modules/ulab/code/utils']

LOCAL_CCFLAGS = ''

if rtconfig.PLATFORM in ['gcc', 'armclang'] :
    LOCAL_CCFLAGS += ' -std=gnu99'
elif rtconfig.PLATFORM == 'armcc':
    LOCAL_CCFLAGS += ' --c99 --gnu'

CPPDEFINES = ['ARM_MATH_CM85', '__FPU_PRESENT']
CPPDEFINES += ['MICROPY_PY_DISPLAY = 1']

group = DefineGroup('openmv/alloc', alloc_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/common', common_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/modules', modules_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/dsp', dsp_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/ulab', ulab_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/ulab/scipy', ulab_scipy_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/port/ra8', port_src, depend = ['BSP_USING_OPENMV'])
group = DefineGroup('openmv/sensor', sensor_src, depend = ['BSP_USING_OPENMV'])
group = group + DefineGroup('openmv/imlib', imlib_src, depend = ['BSP_USING_OPENMV'], CPPPATH = path, LOCAL_CCFLAGS = LOCAL_CCFLAGS, CPPDEFINES = CPPDEFINES)

Return('group')
